name: Rerecord Issue
author: Replay.io
description: Rerecords an issue with updated sources and comments with the results
inputs:
  api-key:
    description: "Replay.io API Key"
  public:
    description: "Makes the rerecorded replay viewable by everyone"
    default: false
  include-summary:
    description: "Display links to the rerecorded replay on the workflow summary page"
    default: true

runs:
  using: composite
  steps:
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install dependencies
      run: npm install @octokit/rest
      shell: bash
      working-directory: ${{ github.action_path }}
    - name: "Rerecord Issue"
      id: "rerecord-issue"
      uses: actions/github-script@v7
      with:
        result-encoding: json
        script: |
          await (async () => {
            const fs = require("fs");
            const { Octokit } = await import("@octokit/rest");

            let apiKey = '${{ inputs.api-key }}';
            if (!apiKey) {
              apiKey = process.env.REPLAY_API_KEY || process.env.RECORD_REPLAY_API_KEY || null;
            }
            if (!apiKey) {
              throw new Error("You must provide an API key for rerecording. This can be added as an environment variable named REPLAY_API_KEY or as an `api-key` input.");
            }

            const eventPayload = JSON.parse(
              fs.readFileSync(process.env.GITHUB_EVENT_PATH, "utf8")
            );
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
            const issue_number = eventPayload.pull_request.number;

            console.log("PullRequestData", owner, repo, issue_number);

            const gap = process.env.GITHUB_ACTION_PATH;
            const rerecordIssue = require(gap + '/dist/rerecord.js');

            const data = await rerecordIssue({
              apiKey,
              public: ${{ inputs.public || false }},
              includeSummary: ${{ inputs.include-summary }},
            });

            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

            await octokit.issues.createComment({
              owner,
              repo,
              issue_number,
              body: data,
            });
          })();
      env:
        REPLAY_API_KEY: ${{ inputs.api-key }}
