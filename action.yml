name: Rerecord Issue
author: Replay.io
description: Rerecords an issue with updated sources and comments with the results
inputs:
  api-key:
    description: "Replay.io API Key"
  public:
    description: "Makes the rerecorded replay viewable by everyone"
    default: false
  include-summary:
    description: "Display links to the rerecorded replay on the workflow summary page"
    default: true

runs:
  using: composite
  steps:
    - name: "Rerecord Issue"
      id: "rerecord-issue"
      uses: actions/github-script@v7
      with:
        result-encoding: json
        script: |
          const fs = require("fs");

          let apiKey = '${{ inputs.api-key }}';
          if (!apiKey) {
            apiKey = process.env.REPLAY_API_KEY || process.env.RECORD_REPLAY_API_KEY || null;
          }
          if (!apiKey) {
            throw new Error("You must provide an API key for rerecording. This can be added as an environment variable named REPLAY_API_KEY or as an `api-key` input.");
          }

          const eventPayload = JSON.parse(
            fs.readFileSync(process.env.GITHUB_EVENT_PATH, "utf8")
          );
          const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
          const pr_number = eventPayload.pull_request.number;
          console.log("PullRequestData", owner, repo, pr_number);

          // Get linked issues using GraphQL
          const query = `
            query($owner: String!, $repo: String!, $pr_number: Int!) {
              repository(owner: $owner, name: $repo) {
                pullRequest(number: $pr_number) {
                  closingIssuesReferences(first: 10) {
                    nodes {
                      number
                    }
                  }
                }
              }
            }
          `;

          const linkedIssuesResult = await github.graphql(query, {
            owner,
            repo,
            pr_number
          });

          const linkedIssues = linkedIssuesResult.repository.pullRequest.closingIssuesReferences.nodes.map(node => node.number);
          console.log(`Found linked issues: ${JSON.stringify(linkedIssues)}`);

          if (!linkedIssues.length) {
            throw new Error("No linked issues found");
          }
          if (linkedIssues.length > 1) {
            throw new Error("More than one linked issue found");
          }

          const issue_number = linkedIssues[0];
          const issue = await github.rest.issues.get({
            owner,
            repo,
            issue_number,
          });

          console.log("LinkedIssue", issue_number, issue.data.title, issue.data.body);

          const gap = process.env.GITHUB_ACTION_PATH;
          const rerecordIssue = require(gap + '/dist/rerecord.js');

          const data = await rerecordIssue({
            apiKey,
            public: ${{ inputs.public || false }},
            includeSummary: ${{ inputs.include-summary }},
          });

          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number,
            body: data,
          });
      env:
        REPLAY_API_KEY: ${{ inputs.api-key }}
